//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1beta1 "github.com/open-policy-agent/frameworks/constraint/pkg/apis/externaldata/v1beta1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Provider)(nil), (*v1beta1.Provider)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Provider_To_v1beta1_Provider(a.(*Provider), b.(*v1beta1.Provider), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Provider)(nil), (*Provider)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Provider_To_v1alpha1_Provider(a.(*v1beta1.Provider), b.(*Provider), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProviderList)(nil), (*v1beta1.ProviderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ProviderList_To_v1beta1_ProviderList(a.(*ProviderList), b.(*v1beta1.ProviderList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ProviderList)(nil), (*ProviderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ProviderList_To_v1alpha1_ProviderList(a.(*v1beta1.ProviderList), b.(*ProviderList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProviderSpec)(nil), (*v1beta1.ProviderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec(a.(*ProviderSpec), b.(*v1beta1.ProviderSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ProviderSpec)(nil), (*ProviderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec(a.(*v1beta1.ProviderSpec), b.(*ProviderSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_Provider_To_v1beta1_Provider(in *Provider, out *v1beta1.Provider, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Provider_To_v1beta1_Provider is an autogenerated conversion function.
func Convert_v1alpha1_Provider_To_v1beta1_Provider(in *Provider, out *v1beta1.Provider, s conversion.Scope) error {
	return autoConvert_v1alpha1_Provider_To_v1beta1_Provider(in, out, s)
}

func autoConvert_v1beta1_Provider_To_v1alpha1_Provider(in *v1beta1.Provider, out *Provider, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_Provider_To_v1alpha1_Provider is an autogenerated conversion function.
func Convert_v1beta1_Provider_To_v1alpha1_Provider(in *v1beta1.Provider, out *Provider, s conversion.Scope) error {
	return autoConvert_v1beta1_Provider_To_v1alpha1_Provider(in, out, s)
}

func autoConvert_v1alpha1_ProviderList_To_v1beta1_ProviderList(in *ProviderList, out *v1beta1.ProviderList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]v1beta1.Provider)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_ProviderList_To_v1beta1_ProviderList is an autogenerated conversion function.
func Convert_v1alpha1_ProviderList_To_v1beta1_ProviderList(in *ProviderList, out *v1beta1.ProviderList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ProviderList_To_v1beta1_ProviderList(in, out, s)
}

func autoConvert_v1beta1_ProviderList_To_v1alpha1_ProviderList(in *v1beta1.ProviderList, out *ProviderList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Provider)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1beta1_ProviderList_To_v1alpha1_ProviderList is an autogenerated conversion function.
func Convert_v1beta1_ProviderList_To_v1alpha1_ProviderList(in *v1beta1.ProviderList, out *ProviderList, s conversion.Scope) error {
	return autoConvert_v1beta1_ProviderList_To_v1alpha1_ProviderList(in, out, s)
}

func autoConvert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec(in *ProviderSpec, out *v1beta1.ProviderSpec, s conversion.Scope) error {
	out.URL = in.URL
	out.Timeout = in.Timeout
	out.CABundle = in.CABundle
	out.InsecureTLSSkipVerify = in.InsecureTLSSkipVerify
	return nil
}

// Convert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec is an autogenerated conversion function.
func Convert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec(in *ProviderSpec, out *v1beta1.ProviderSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ProviderSpec_To_v1beta1_ProviderSpec(in, out, s)
}

func autoConvert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec(in *v1beta1.ProviderSpec, out *ProviderSpec, s conversion.Scope) error {
	out.URL = in.URL
	out.Timeout = in.Timeout
	out.CABundle = in.CABundle
	out.InsecureTLSSkipVerify = in.InsecureTLSSkipVerify
	return nil
}

// Convert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec is an autogenerated conversion function.
func Convert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec(in *v1beta1.ProviderSpec, out *ProviderSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_ProviderSpec_To_v1alpha1_ProviderSpec(in, out, s)
}
